import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import time

# === Bitmap Rule Encoding (Ra-CSL style) ===
def bitmap_encode(df):
    rules = {
        'sbytes': lambda x: 1 if x >= 340000 else 0,
        'sloss': lambda x: 1 if x >= 130 else 0,
        'sttl': lambda x: 1 if x in [63, 255] else 0,
        'trans_depth': lambda x: 0 if x in [0, 1] else 1,
        'swin': lambda x: 1 if x in [0, 255] else 0,
        'dwin': lambda x: 1 if x in [0, 255] else 0,
        'spkts': lambda x: 1 if x >= 691 else 0,
        'dpkts': lambda x: 1 if x >= 1433 else 0,
        'ct_src_dport_ltm': lambda x: 1 if x >= 5 else 0,
        'ct_dst_sport_ltm': lambda x: 1 if x >= 5 else 0,
        'ct_dst_src_ltm': lambda x: 1 if x >= 45 else 0,
        'dttl': lambda x: 1 if x == 253 else (0 if x in [29, 30, 31, 32] else -1),
        'ct_state_ttl': lambda x: 1 if x in [4, 5] else 0,
        'is_ftp_login': lambda x: 1 if x == 2 else 0,
        'ct_flow_http_mthd': lambda x: 1 if x in [0, 1, 2, 4, 16] else (0 if x in [6, 9, 12] else -1),
        'is_sm_ips_ports': lambda x: 1 if x == 0 else 0,
        'dbytes': lambda x: 1 if x >= 2000000 else 0,
        'dloss': lambda x: 1 if x >= 1000 else 0,
        'smeansz': lambda x: 1 if x >= 1500 else 0,
        'response_body_len': lambda x: 1 if x >= 1000000 else 0,
        'ct_srv_src': lambda x: 1 if x >= 50 else 0
    }
    encoded_df = df.copy()
    for col, rule in rules.items():
        if col in df.columns:
            encoded_df[col] = df[col].apply(rule)
    return encoded_df

# === Preprocessing functions ===
def preprocess_train(df):
    le_dict = {}
    for col in df.select_dtypes(include=['object']).columns:
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col].astype(str))
        le_dict[col] = le
    return df, le_dict

def preprocess_test(df, le_dict):
    df = df.copy()
    for col, le in le_dict.items():
        df[col] = df[col].astype(str)
        df = df[df[col].isin(le.classes_)]
        df[col] = le.transform(df[col])
    return df

# === Evaluation function ===
def evaluate_model(name, model, X_train, X_test, y_train, y_test, model_performance):
    start = time.time()
    model.fit(X_train, y_train)
    end_train = time.time()
    y_pred = model.predict(X_test)
    end_predict = time.time()

    accuracy = accuracy_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred, average='weighted')
    precision = precision_score(y_test, y_pred, average='weighted')
    f1s = f1_score(y_test, y_pred, average='weighted')

    print(f"{name} Results")
    print("Accuracy: {:.2%}".format(accuracy))
    print("Recall: {:.2%}".format(recall))
    print("Precision: {:.2%}".format(precision))
    print("F1-Score: {:.2%}".format(f1s))
    print("Train Time: {:.2f} s".format(end_train - start))
    print("Predict Time: {:.2f} s".format(end_predict - end_train))
    print("Total Time: {:.2f} s\n".format(end_predict - start))

    model_performance.loc[name] = [accuracy, recall, precision, f1s,
                                   end_train - start,
                                   end_predict - end_train,
                                   end_predict - start]

def main():
    df_train = pd.read_csv("UNSW_NB15_training-set.csv")
    df_test = pd.read_csv("UNSW_NB15_testing-set.csv")

    df_train, le_dict = preprocess_train(df_train)
    df_test = preprocess_test(df_test, le_dict)

    X_train = df_train.drop("label", axis=1)
    y_train = df_train["label"]
    X_test = df_test.drop("label", axis=1)
    y_test = df_test["label"]

    scaler = MinMaxScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    model_performance = pd.DataFrame(columns=["Accuracy", "Recall", "Precision", "F1-Score", "Train Time", "Predict Time", "Total Time"])

    # Logistic Regression on original data
    evaluate_model("Logistic", LogisticRegression(max_iter=1000), X_train_scaled, X_test_scaled, y_train, y_test, model_performance)

    # Naive Bayes on original data
    evaluate_model("Naive Bayes", GaussianNB(), X_train_scaled, X_test_scaled, y_train, y_test, model_performance)

    # Logistic Regression with Bitmap Rule (Ra-CSL)
    X_train_bitmap = bitmap_encode(X_train)
    X_test_bitmap = bitmap_encode(X_test)
    evaluate_model("Ra-CSL Logistic", LogisticRegression(max_iter=1000), X_train_bitmap, X_test_bitmap, y_train, y_test, model_performance)

    # Naive Bayes with Bitmap Rule (Ra-CSL)
    evaluate_model("Ra-CSL NB", GaussianNB(), X_train_bitmap, X_test_bitmap, y_train, y_test, model_performance)

    print("\nModel Performance Summary:")
    print(model_performance)

if __name__ == "__main__":
    main()
